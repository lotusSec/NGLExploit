import requests
import threading
import time
import random


# Function to detect device type (this is a simplified version as Python scripts cannot directly access device information like JavaScript in a browser)
def detect_device():
    return "Laptop or Desktop"


# Function to get public IP information
def get_ip_info():
    try:
        response = requests.get("https://ipapi.co/json/")
        if response.status_code == 200:
            data = response.json()
            return {
                "ip_address": data.get("ip", ""),
                "country_name": data.get("country_name", ""),
                "isp": data.get("org", ""),
                "latitude": data.get("latitude", ""),
                "longitude": data.get("longitude", "")
            }
    except requests.RequestException:
        print("Error getting IP info.")
    return None


# Function to get IPv4 address
def get_ipv4_address():
    try:
        response = requests.get("https://ipv4.icanhazip.com")
        if response.status_code == 200:
            return response.text.strip()
    except requests.RequestException:
        print("Error getting IPv4 address.")
    return None


# Function to generate a random device ID similar to the JavaScript function
def generate_random_device_id():
    return ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=26))


# Main class that simulates the spammer tool functionality
class NGLSpammer:
    def __init__(self):
        self.is_running = False
        self.xhr_threads = []
        self.username = ""
        self.question = ""
        self.device_id = generate_random_device_id()
        self.games = ['cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled', 'cancelled']
        self.game_slug = random.choice(self.games)

    def start(self, username, question):
        if self.is_running:
            print("Spammer is already running.")
            return

        self.username = username
        self.question = question
        self.is_running = True

        # Print device and network information
        ip_info = get_ip_info()
        ipv4_address = get_ipv4_address()
        device_info = detect_device()

        print(f"IPv6 Address: {ip_info['ip_address'] if ip_info else 'N/A'}")
        print(f"IPv4 Address: {ipv4_address if ipv4_address else 'N/A'}")
        print(f"Device: {device_info}")
        print(f"Country Name: {ip_info['country_name'] if ip_info else 'N/A'}")
        print(f"ISP: {ip_info['isp'] if ip_info else 'N/A'}")
        print(f"Latitude: {ip_info['latitude'] if ip_info else 'N/A'}")
        print(f"Longitude: {ip_info['longitude'] if ip_info else 'N/A'}")
        print(f"Target Username: {self.username}")
        print(f"Message: {self.question}")

        # Start sending requests
        print("Starting NGL Spammer...")

        def send_request():
            while self.is_running:
                try:
                    url = "https://ngl.link/api/submit"
                    headers = {
                        "Accept": "*/*",
                        "Accept-Encoding": "gzip, deflate, br",
                        "Accept-Language": "en-US,en;q=0.9",
                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                        "Host": "ngl.link",
                        "Origin": "https://ngl.link",
                        "Referer": f"https://ngl.link/@{self.username}/cancelled",
                        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
                    }
                    data = {
                        "username": self.username,
                        "question": self.question,
                        "deviceId": self.device_id,
                        "gameSlug": self.game_slug
                    }
                    response = requests.post(url, data=data, headers=headers)
                    print(f"Request sent: {response.status_code}")
                except requests.RequestException as e:
                    print(f"Error sending request: {e}")

                time.sleep(1)

        thread = threading.Thread(target=send_request)
        self.xhr_threads.append(thread)
        thread.start()

    def stop(self):
        print("Stopping NGL Spammer...")
        self.is_running = False
        for thread in self.xhr_threads:
            thread.join()
        self.xhr_threads = []


if __name__ == "__main__":
    spammer = NGLSpammer()

    username = input("Enter target username: ")
    question = input("Enter message: ")

    spammer.start(username, question)

    try:
        while True:
            time.sleep(0.1)
    except KeyboardInterrupt:
        spammer.stop()
      
